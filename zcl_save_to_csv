*****************************************************************
*                         CLASS DEFINITION                      *
*****************************************************************
CLASS cl_save_to_csv DEFINITION.

  PUBLIC SECTION.
    TYPES : BEGIN OF ty_instruction_s,
              table         TYPE REF TO data,
              column_header TYPE string,
              column_name   TYPE string,
              fixed_value   TYPE xflag,
            END OF ty_instruction_s,
            ty_instruction_t TYPE STANDARD TABLE OF ty_instruction_s WITH KEY table column_header column_name,
            ty_csv           TYPE TABLE OF string WITH DEFAULT KEY
            .
    CLASS-METHODS : add_instruction       IMPORTING REFERENCE(im_table)          TYPE data
                                                    VALUE(im_column_name)        TYPE string
                                                    VALUE(im_column_header)      TYPE string OPTIONAL
                                                    VALUE(im_fixed_value)        TYPE xflag DEFAULT ' ',
                    add_instruction_table IMPORTING im_lines TYPE ty_instruction_t,
                    get_instruction_table RETURNING VALUE(ex_instruction_t) TYPE ty_instruction_t,
                    get_output            RETURNING VALUE(ex_csv) TYPE ty_csv,
                    set_seperator         IMPORTING im_seperator TYPE CHAR1,
                    clear_instructions "VOID
    .

  PRIVATE SECTION.
    CLASS-DATA : lt_instructions TYPE ty_instruction_t,
                 lt_csv          TYPE ty_csv,
                 lv_seperator    TYPE CHAR1 VALUE ';'
                 .


ENDCLASS.

*****************************************************************
*                       CLASS IMPLEMENTATION                    *
*****************************************************************
CLASS cl_save_to_csv IMPLEMENTATION.

  METHOD add_instruction.

    DATA(ls_instruction) = VALUE ty_instruction_s(
      column_header = im_column_header
      column_name = im_column_name
      fixed_value = im_fixed_value
    ).
    GET REFERENCE OF im_table INTO ls_instruction-table.
    APPEND ls_instruction TO lt_instructions.

  ENDMETHOD.

  METHOD add_instruction_table.
    APPEND LINES OF im_lines TO lt_instructions.
  ENDMETHOD.

  METHOD clear_instructions.
    REFRESH lt_instructions.
  ENDMETHOD.

  METHOD get_instruction_table.
    ex_instruction_t = lt_instructions.
  ENDMETHOD.

  METHOD set_seperator.
    lv_seperator = im_seperator.
  ENDMETHOD.

  METHOD get_output.

    FIELD-SYMBOLS : <fs_table> TYPE table,
                    <fs_field> TYPE any
                    .
    DATA : row_index TYPE i,
           lv_row    TYPE string
           .

    REFRESH lt_csv.
    CLEAR lv_row.

    LOOP AT lt_instructions INTO DATA(ls_instructions_head). "Create header
      IF ls_instructions_head-column_header IS NOT INITIAL.
        CONCATENATE lv_row ls_instructions_head-column_header INTO lv_row SEPARATED BY lv_seperator.
      ENDIF.
    ENDLOOP.
    IF lv_row IS NOT INITIAL.
      APPEND lv_row TO lt_csv.
    ENDIF.
    
    LOOP AT lt_instructions INTO DATA(ls_instructions). "Loop on columns
        row_index = 1.

        ASSIGN ls_instructions-table->* TO <fs_table>.
        LOOP AT <fs_table> ASSIGNING FIELD-SYMBOL(<fs_struct>). "Loop on rows
          CLEAR lv_row.
          "Get data from table reference :
          IF ls_instructions-fixed_value IS INITIAL.
            UNASSIGN <fs_field>.
            ASSIGN COMPONENT ls_instructions-column_name OF STRUCTURE <fs_struct> TO <fs_field>.
            IF <fs_field> IS ASSIGNED.
              lv_row = conv string( <fs_field> ).
            ENDIF.
          ELSE.
            lv_row = ls_instructions-column_name.
          ENDIF.
          "Update output table lt_csv :
          IF row_index > lines( lt_csv ).
            APPEND lv_row TO lt_csv.
          ELSE.
            DATA(lv_current_row) = lt_csv[ row_index ].
            CONCATENATE lv_current_row lv_row INTO lv_row SEPARATED BY lv_seperator.
            lt_csv[ row_index ] = lv_row.
            clear lv_current_row.
          ENDIF.
          row_index = row_index + 1.
        ENDLOOP.


    ENDLOOP.

    ex_csv = lt_csv.

  ENDMETHOD.

ENDCLASS.
